@page "/EditEmployee/{employeeID}"
@inherits Employees
@using BlazorApp1.Models
@inject NavigationManager NavigationManager
@inject BlazorApp1.Services.FileService FileService
@inject IConfiguration config

<PageTitle> Edit Employee</PageTitle>
<h1>Edit Employee</h1>
@if (OriginalEmployee == null)
{
    <p><em>Loading...</em></p>
}
else{
    <div class="card m-3  d-flex flex-wrap" style="width:26.66%; max-height:10.5%;">
        <div class="card-header">
            <h3>@OriginalEmployee.Name</h3>
        </div>
        <img class="card-img-top imageThumbnail" style="height: 250px" src="@($"{OriginalEmployee.ProfileImage}?t={DateTime.Now.Ticks}")" />
        <ul class="list-group list-group-flush">
            <li class="list-group-item">ID: @OriginalEmployee.ID</li>
            <li class="list-group-item">@OriginalEmployee.Title <img src="@($"icons/{OriginalEmployee.Title}.png")" width="30" height="30" /></li>
            <li class="list-group-item">Salary:@OriginalEmployee.Salary ₪</li>
        </ul>
    </div>
    <hr />
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Employee" OnValidSubmit="editEmployee" FormName="create" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />
                @if (!string.IsNullOrEmpty(IdErrorMessage))
                {
                    <div class="text-danger">@IdErrorMessage</div>
                }
                <div class="mb-3">
                    <label for="title" class="form-label">ID:</label>
                    <InputText id="ID" @bind-Value="Employee.ID" @oninput="()=>{IdErrorMessage=string.Empty;Employee.ProfileImage=OriginalEmployee.ProfileImage;}" class="form-control" />
                    <ValidationMessage For="() => Employee.ID" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="Name" @bind-Value="Employee.Name" class="form-control" />
                    <ValidationMessage For="() => Employee.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="title" class="form-label">Title:</label>
                    <InputSelect id="Title" @bind-Value="Employee.Title" class="form-control">
                        <option value="" disabled selected>-- Select a Title --</option>
                        <option value="Junior">Junior</option>
                        <option value="Senior">Senior</option>
                        <option value="CEO">CEO</option>
                    </InputSelect>
                    <ValidationMessage For="() => Employee.Title" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="Salary" class="form-label">Salary:</label>
                    <InputNumber id="salary" @bind-Value="Employee.Salary" class="form-control" />
                    <ValidationMessage For="() => Employee.Salary" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="profileImage" class="form-label">Profile Image:</label>
                    <InputFile OnChange="FileUploaded" accept=".png,.jpg,.jpeg" />
                    <ValidationMessage For="() => Employee.ProfileImage" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary">Save Changes</button>
            </EditForm>
        </div>
    </div>
    <div>
        <a href="/employees">Back to List</a>
    </div>
}

@code {
    [Parameter]
    public String employeeID { get; set; }
    private Employee? OriginalEmployee { get; set; }
    //public List<Employee>? employees;
    [SupplyParameterFromForm]
    private Employee Employee { get; set; } = new();
    public IBrowserFile? browserFile { get; set; }
    private string IdErrorMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Load wmployees data from CSV stored in wwwroot
        employees = await FileService.LoadEmployees("wwwroot/employees.csv");
        OriginalEmployee = employees?.Find(e => e.ID == employeeID);
        Employee.ID = OriginalEmployee.ID;
        Employee.Name = OriginalEmployee.Name;
        Employee.Title = OriginalEmployee.Title;
        Employee.Salary = OriginalEmployee.Salary;
        Employee.ProfileImage = OriginalEmployee.ProfileImage;
    }

    private async Task editEmployee()
    {
        //check if the user changed the id to an existing one
        if (employees.Any(e => (e.ID == Employee.ID) && !Employee.ID.Equals(employeeID)))
        {
            IdErrorMessage = "This ID already exists!";
            return;
        }

        //check if the user changed the id and didn't upload a new image
        if (browserFile == null && !Employee.ID.Equals(employeeID))
        {
            Employee.ProfileImage = string.Empty;
            IdErrorMessage = "an image is required for the new id";
            return;
        }

        Employee.ProfileImage = OriginalEmployee.ProfileImage;

        // Ensure that the ProfileImage path is updated with the correct ID
        if (browserFile != null)
        {
            var extension = Path.GetExtension(browserFile.Name);
            Employee.ProfileImage = $"images/{Employee.ID}{extension}";


            // If ID is unique, proceed with editing the employee
            IdErrorMessage = string.Empty;
            await FileService.FileUpload(Employee.ID, browserFile);
            StateHasChanged();
        }

        OriginalEmployee.ID = Employee.ID;
        OriginalEmployee.Name = Employee.Name;
        OriginalEmployee.Title = Employee.Title;
        OriginalEmployee.Salary = Employee.Salary;
        StateHasChanged();
        OriginalEmployee.ProfileImage = Employee.ProfileImage;
        Console.WriteLine(employees.Count);
        if (employees != null)
        {
            await FileService.SaveToCsvAsync(employees, "employees.csv");//saving new list to file
        }
        NavigationManager.NavigateTo("/employees");
    }


    //saving the file and upload path of the image
    private void FileUploaded(InputFileChangeEventArgs e)
    {
        browserFile = e.File;
        var newFile = Employee.ID;
        var extension = Path.GetExtension(browserFile.Name);
        var targetFilePath = Path.ChangeExtension(newFile, extension);
        Employee.ProfileImage = "images/" + targetFilePath;
        if (IdErrorMessage.Equals("an image is required for the new id"))
        {
            IdErrorMessage = string.Empty;
        }
    }

}
